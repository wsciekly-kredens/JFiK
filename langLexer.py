# Generated from lang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,106,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,3,4,3,49,8,3,11,3,12,3,50,1,4,4,4,54,8,4,11,
        4,12,4,55,1,5,4,5,59,8,5,11,5,12,5,60,1,5,1,5,4,5,65,8,5,11,5,12,
        5,66,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,96,
        8,14,1,14,1,14,1,15,4,15,101,8,15,11,15,12,15,102,1,15,1,15,0,0,
        16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,1,0,2,2,0,65,90,97,122,2,0,9,9,32,32,111,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,1,33,1,0,0,0,3,35,1,0,0,0,5,40,1,0,0,0,7,48,1,0,0,0,9,53,1,
        0,0,0,11,58,1,0,0,0,13,68,1,0,0,0,15,74,1,0,0,0,17,82,1,0,0,0,19,
        84,1,0,0,0,21,86,1,0,0,0,23,88,1,0,0,0,25,90,1,0,0,0,27,92,1,0,0,
        0,29,95,1,0,0,0,31,100,1,0,0,0,33,34,5,61,0,0,34,2,1,0,0,0,35,36,
        5,98,0,0,36,37,5,97,0,0,37,38,5,114,0,0,38,39,5,107,0,0,39,4,1,0,
        0,0,40,41,5,108,0,0,41,42,5,105,0,0,42,43,5,115,0,0,43,44,5,116,
        0,0,44,45,5,101,0,0,45,46,5,110,0,0,46,6,1,0,0,0,47,49,7,0,0,0,48,
        47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,8,1,0,0,
        0,52,54,2,48,57,0,53,52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,
        1,0,0,0,56,10,1,0,0,0,57,59,2,48,57,0,58,57,1,0,0,0,59,60,1,0,0,
        0,60,58,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,64,5,46,0,0,63,65,
        2,48,57,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,
        0,67,12,1,0,0,0,68,69,5,40,0,0,69,70,5,105,0,0,70,71,5,110,0,0,71,
        72,5,116,0,0,72,73,5,41,0,0,73,14,1,0,0,0,74,75,5,40,0,0,75,76,5,
        102,0,0,76,77,5,108,0,0,77,78,5,111,0,0,78,79,5,97,0,0,79,80,5,116,
        0,0,80,81,5,41,0,0,81,16,1,0,0,0,82,83,5,40,0,0,83,18,1,0,0,0,84,
        85,5,41,0,0,85,20,1,0,0,0,86,87,5,43,0,0,87,22,1,0,0,0,88,89,5,45,
        0,0,89,24,1,0,0,0,90,91,5,42,0,0,91,26,1,0,0,0,92,93,5,47,0,0,93,
        28,1,0,0,0,94,96,5,13,0,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,
        0,0,97,98,5,10,0,0,98,30,1,0,0,0,99,101,7,1,0,0,100,99,1,0,0,0,101,
        102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,
        105,6,15,0,0,105,32,1,0,0,0,7,0,50,55,60,66,95,102,1,6,0,0
    ]

class langLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    WRITE = 2
    READ = 3
    ID = 4
    INT = 5
    FLOAT = 6
    TOINT = 7
    TOFLOAT = 8
    LP = 9
    RP = 10
    ADD = 11
    SUBSTRACT = 12
    MULT = 13
    DIVIDE = 14
    NEWLINE = 15
    WS = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'bark'", "'listen'", "'(int)'", "'(float)'", "'('", 
            "')'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "WRITE", "READ", "ID", "INT", "FLOAT", "TOINT", "TOFLOAT", "LP", 
            "RP", "ADD", "SUBSTRACT", "MULT", "DIVIDE", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "WRITE", "READ", "ID", "INT", "FLOAT", "TOINT", 
                  "TOFLOAT", "LP", "RP", "ADD", "SUBSTRACT", "MULT", "DIVIDE", 
                  "NEWLINE", "WS" ]

    grammarFileName = "lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


