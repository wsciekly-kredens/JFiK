# Generated from lang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,144,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,4,11,82,8,11,11,11,
        12,11,83,1,12,4,12,87,8,12,11,12,12,12,88,1,13,4,13,92,8,13,11,13,
        12,13,93,1,13,1,13,4,13,98,8,13,11,13,12,13,99,1,14,1,14,5,14,104,
        8,14,10,14,12,14,107,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,3,21,134,8,21,1,21,1,21,1,22,4,22,139,8,22,11,
        22,12,22,140,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,1,0,3,2,0,65,90,97,122,2,0,34,34,92,92,2,
        0,9,9,32,32,150,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,
        3,49,1,0,0,0,5,51,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,
        0,13,59,1,0,0,0,15,61,1,0,0,0,17,63,1,0,0,0,19,68,1,0,0,0,21,75,
        1,0,0,0,23,81,1,0,0,0,25,86,1,0,0,0,27,91,1,0,0,0,29,101,1,0,0,0,
        31,110,1,0,0,0,33,116,1,0,0,0,35,124,1,0,0,0,37,126,1,0,0,0,39,128,
        1,0,0,0,41,130,1,0,0,0,43,133,1,0,0,0,45,138,1,0,0,0,47,48,5,61,
        0,0,48,2,1,0,0,0,49,50,5,91,0,0,50,4,1,0,0,0,51,52,5,93,0,0,52,6,
        1,0,0,0,53,54,5,123,0,0,54,8,1,0,0,0,55,56,5,44,0,0,56,10,1,0,0,
        0,57,58,5,125,0,0,58,12,1,0,0,0,59,60,5,40,0,0,60,14,1,0,0,0,61,
        62,5,41,0,0,62,16,1,0,0,0,63,64,5,98,0,0,64,65,5,97,0,0,65,66,5,
        114,0,0,66,67,5,107,0,0,67,18,1,0,0,0,68,69,5,108,0,0,69,70,5,105,
        0,0,70,71,5,115,0,0,71,72,5,116,0,0,72,73,5,101,0,0,73,74,5,110,
        0,0,74,20,1,0,0,0,75,76,5,112,0,0,76,77,5,97,0,0,77,78,5,99,0,0,
        78,79,5,107,0,0,79,22,1,0,0,0,80,82,7,0,0,0,81,80,1,0,0,0,82,83,
        1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,24,1,0,0,0,85,87,2,48,57,
        0,86,85,1,0,0,0,87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,26,
        1,0,0,0,90,92,2,48,57,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,
        0,93,94,1,0,0,0,94,95,1,0,0,0,95,97,5,46,0,0,96,98,2,48,57,0,97,
        96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,28,1,0,
        0,0,101,105,5,34,0,0,102,104,8,1,0,0,103,102,1,0,0,0,104,107,1,0,
        0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,
        0,0,108,109,5,34,0,0,109,30,1,0,0,0,110,111,5,40,0,0,111,112,5,105,
        0,0,112,113,5,110,0,0,113,114,5,116,0,0,114,115,5,41,0,0,115,32,
        1,0,0,0,116,117,5,40,0,0,117,118,5,102,0,0,118,119,5,108,0,0,119,
        120,5,111,0,0,120,121,5,97,0,0,121,122,5,116,0,0,122,123,5,41,0,
        0,123,34,1,0,0,0,124,125,5,43,0,0,125,36,1,0,0,0,126,127,5,45,0,
        0,127,38,1,0,0,0,128,129,5,42,0,0,129,40,1,0,0,0,130,131,5,47,0,
        0,131,42,1,0,0,0,132,134,5,13,0,0,133,132,1,0,0,0,133,134,1,0,0,
        0,134,135,1,0,0,0,135,136,5,10,0,0,136,44,1,0,0,0,137,139,7,2,0,
        0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,
        0,141,142,1,0,0,0,142,143,6,22,0,0,143,46,1,0,0,0,8,0,83,88,93,99,
        105,133,140,1,6,0,0
    ]

class langLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    WRITE = 9
    READ = 10
    ARRAY = 11
    ID = 12
    INT = 13
    FLOAT = 14
    STRING = 15
    TOINT = 16
    TOFLOAT = 17
    ADD = 18
    SUBSTRACT = 19
    MULT = 20
    DIVIDE = 21
    NEWLINE = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'['", "']'", "'{'", "','", "'}'", "'('", "')'", "'bark'", 
            "'listen'", "'pack'", "'(int)'", "'(float)'", "'+'", "'-'", 
            "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "WRITE", "READ", "ARRAY", "ID", "INT", "FLOAT", "STRING", "TOINT", 
            "TOFLOAT", "ADD", "SUBSTRACT", "MULT", "DIVIDE", "NEWLINE", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "WRITE", "READ", "ARRAY", "ID", "INT", "FLOAT", 
                  "STRING", "TOINT", "TOFLOAT", "ADD", "SUBSTRACT", "MULT", 
                  "DIVIDE", "NEWLINE", "WS" ]

    grammarFileName = "lang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


